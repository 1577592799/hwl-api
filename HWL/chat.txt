android发送消息到mq中的group queue
c#控制台监听mq中的group queue
有消息进来，开启线程处理消息
首先从redis里面取出组用户数据和组数量数据，拼接成queue name
然后再调用mq,将消息发送到拼接的queue name

redis中存储组用户的格式:
db0:groupid usercount
db1:groupid hset<userid>

rabbitmq:hwl_group_queue

1,先定义redis格式，并输入测试数据
2，编写从redis里获取数据，和更新数据的处理程序
3，定义mq中group_queue中消息的格式，并录入消息
4，监听mq中指定的group_queue，并获取消息进行分析后分发到指定队列


2018-02-08:
添加好友成功后需要发送添加成共的消息
好友接受到消息后需要将我的信息添加到自己本地的数据库中,并且还要添加一条聊天信息


2018-02-22:
1,表情发送 V
2,图片发送 V
3,语音发送 V
4,视频发送 V
5,附近圈子API V


//语音：http://blog.csdn.net/lhk147852369/article/details/78658055
public class AudioManager {  
  
    private MediaRecorder mMediaRecorder;  
    private String mDir;  
    private String mCurrentFilePath;  
  
    private static AudioManager mInstance;  
  
    private boolean isPrepared;  
    public AudioManager(String dir){  
        mDir = dir;  
    };  
  
  
  
    /** 
     * 回调准备完毕 
     */  
    public interface AudioStateListener {  
        void wellPrepared();  
    }  
  
    public AudioStateListener mListener;  
  
    public void setOnAudioStateListener(AudioStateListener listener){  
        mListener = listener;  
    }  
  
    public static AudioManager getInstance(String dir){  
        if (mInstance == null) {  
            synchronized (AudioManager.class) {  
                if (mInstance == null) {  
                    mInstance = new AudioManager(dir);  
                }  
            }  
        }  
        return mInstance;  
    }  
  
  
    /** 
     * 准备 
     */  
    public void prepareAudio() {  
        try {  
            isPrepared = false;  
            File dir = new File(mDir);  
            if (!dir.exists()) {  
                dir.mkdir();  
            }  
            String fileName = generateFileName();  
  
            File file = new File(dir, fileName);  
  
            mCurrentFilePath = file.getAbsolutePath();  
  
            mMediaRecorder = new MediaRecorder();  
            //设置输出文件  
            mMediaRecorder.setOutputFile(file.getAbsolutePath());  
            //设置MediaRecorder的音频源为麦克风  
            mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);  
            //设置音频格式  
            mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.RAW_AMR);  
            //设置音频的格式为amr  
            mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);  
            mMediaRecorder.prepare();  
            mMediaRecorder.start();  
            //准备结束  
            isPrepared = true;  
            if (mListener != null) {  
                mListener.wellPrepared();  
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }  
  
//    生成UUID唯一标示符  
//    算法的核心思想是结合机器的网卡、当地时间、一个随即数来生成GUID  
//    .amr音频文件  
    private String generateFileName() {  
        return UUID.randomUUID().toString()+".amr";  
    }  
  
    public int getVoiceLevel(int maxLevel) {  
        if (isPrepared) {  
            //获得最大的振幅getMaxAmplitude() 1-32767  
            try {  
                return maxLevel * mMediaRecorder.getMaxAmplitude()/32768+1;  
            } catch (Exception e) {  
  
            }  
        }  
        return 1;  
    }  
  
    public void release() {  
        mMediaRecorder.stop();  
        mMediaRecorder.release();  
        mMediaRecorder = null;  
    }  
  
    public void cancel(){  
        release();  
        if(mCurrentFilePath!=null) {  
            File file = new File(mCurrentFilePath);  
            file.delete();  
            mCurrentFilePath = null;  
        }  
    }  
    public String getCurrentFilePath() {  
        return mCurrentFilePath;  
    }  
}  

2018-03-15:
1,Near IMP